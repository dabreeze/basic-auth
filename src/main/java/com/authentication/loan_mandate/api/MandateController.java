/*   1. gets a list of loans from Excel and uploads to the database   2. using the list connect to middle ware and return a reference number from the middle ware where   successful or fail log the status message to the db   3 if not successful initiate a cron job to run at midnight to make another connection to the middle ware   3. save the reference back to NX360 database    */package com.authentication.loan_mandate.api;import com.authentication.loan_mandate.data.LoanMandateGroupDto;import com.authentication.loan_mandate.domain.model.LoanMandate;import com.authentication.loan_mandate.utilHelper.ExcelHelper;import com.authentication.loan_mandate.service.MandateService;import org.json.JSONObject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.io.IOException;import java.net.UnknownHostException;import java.util.List;@RestController@RequestMapping("/v1/loanMandate")public class MandateController {    private final Logger Log = LoggerFactory.getLogger(MandateService.class);    private final MandateService mandateService;    public MandateController(final MandateService mandateService) {        this.mandateService = mandateService;    }    //    @PostMapping("/loanMandate/generateMandate")    @GetMapping("/generateMandate")    public ResponseEntity<?> getListOfLoansAtSource() throws IOException, UnknownHostException {        Log.info("----------> Request from Controller comes here");        JSONObject result = mandateService.generateMandate();        Log.info("result from controller {}", result);        return new ResponseEntity<>(result.toString(), HttpStatus.OK);    }    @PostMapping("/upload")    public ResponseEntity<?> uploadMandateSchedule(@RequestParam("file") @Valid MultipartFile file) throws IOException {        JSONObject jsonObject = new JSONObject();        if (ExcelHelper.hasExcelFormat(file)) {            Log.info("-------> file validated and received");            return ResponseEntity.ok().body(mandateService.uploadExcelMandateSchedule(file));        }        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(jsonObject.toMap());    }    @GetMapping("/downloadTemplate")    public ResponseEntity<?> exportLoansToExcel(HttpServletResponse response) throws IOException {        response.setContentType("application/octet-stream");        String headerKey = "Content-Disposition";        String headerValue = "attachment; filename=loan_schedule.xlsx";        response.setHeader(headerKey, headerValue);        return ResponseEntity.ok().body(mandateService.exportLoansToExcelFormat(response));    }    @GetMapping("/reports/group")    public ResponseEntity<List<LoanMandateGroupDto>> generateGroupReportForLoanMandate(@RequestParam(defaultValue = "", required = false) String startDate, @RequestParam(defaultValue = "",required = false) String endDate,@RequestParam(defaultValue = "",required = false)String batchNumber, @RequestParam(defaultValue = "",required = false) Integer status)    {        List<LoanMandateGroupDto> result = mandateService.generateGroupReportForLoanMandate();        return ResponseEntity.ok().body(result);    }    @GetMapping("/reports")    public ResponseEntity<List<LoanMandate>> generateReportForLoanMandate(@RequestParam( required = false) String startDate, @RequestParam(required = false) String endDate, @RequestParam(required = false)String batchNumber, @RequestParam(required = false) Integer status)    {        List<LoanMandate> result = mandateService.generateReportForLoanMandate(startDate,endDate,batchNumber,status);        Log.info("result size{}", result.size());        return ResponseEntity.ok().body(result);    }}