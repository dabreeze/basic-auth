package com.authentication.loan_mandate.utilHelper;import com.authentication.loan_mandate.data.ExcelPayloadRequest;import com.authentication.loan_mandate.domain.model.LoanMandate;import lombok.extern.slf4j.Slf4j;import org.apache.poi.ss.usermodel.*;import org.apache.poi.ss.util.CellRangeAddress;import org.apache.poi.xssf.usermodel.XSSFFont;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.security.SecureRandom;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.*;@Service@Slf4jpublic class ExcelHelper {    public static String TYPE = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";    static String[] HEADERs = {"Id", "Title", "Description", "Published"};    static String SHEET = "Tutorials";    private final XSSFWorkbook workbook;    private XSSFSheet sheet;    private final List<LoanMandate> loanMandateList;    public ExcelHelper(List<LoanMandate> loanMandateList) {        this.workbook = new XSSFWorkbook();        this.loanMandateList = loanMandateList;    }    public static boolean hasExcelFormat(MultipartFile file) {        if (TYPE.equals(file.getContentType())) {            return true;        } else {            return false;        }    }    //  Converts Excel to list of Loan Mandate    public List<ExcelPayloadRequest> readExcelToDatabase(InputStream is) {        log.info("---------> added excel helper printout ");        List<ExcelPayloadRequest> list = new ArrayList<>();        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));        Calendar calendar2 = Calendar.getInstance();        calendar2.set(Calendar.DATE, 1);        calendar2.set(Calendar.MONTH, calendar.get(Calendar.MONTH) + 1);        LocalDate localDateTime = LocalDate.ofInstant(calendar2.toInstant(), ZoneId.systemDefault());        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")                .withZone(ZoneId.of("UTC"));        LocalDate startDate = LocalDate.now();        SecureRandom secureRand = new SecureRandom();        int secureRandomNumber = secureRand.nextInt(10) + 1;        String batch = String.valueOf(LocalDateTime.now().getYear()).concat(String.valueOf(LocalDateTime.now()                        .getDayOfMonth())).concat(String.valueOf(LocalDateTime.now().getHour()))                .concat(String.valueOf(LocalDateTime.now().getMinute()))                .concat(String.valueOf(LocalDateTime.now().getSecond()));        ExcelPayloadRequest loanMandate = new ExcelPayloadRequest();        try {            Workbook workbook = new XSSFWorkbook(is);            Sheet sheet = workbook.getSheetAt(0);            Iterator<Row> rows = sheet.iterator();            List<ExcelPayloadRequest> excelPayloadRequestArrayList = new ArrayList<ExcelPayloadRequest>();            int rowNumber = 0;            while (rows.hasNext()) {                Row currentRow = rows.next();                // skip header                if (rowNumber == 0) {                    rowNumber++;                    continue;                }                Iterator<Cell> cellsInRow = currentRow.iterator();                ExcelPayloadRequest request = new ExcelPayloadRequest();//                request.setId( null);                request.setStartDate(LocalDate.now().toString());                request.setEndDate(localDateTime.toString());                request.setBatchNumber(batch);                request.setStatus(0);                int cellIdx = 0;                DataFormatter dataFormatter = new DataFormatter();                while (cellsInRow.hasNext()) {                    Cell currentCell = cellsInRow.next();                    String value = dataFormatter.formatCellValue(currentCell);                    log.info("formatter {}",value);                    switch (cellIdx) {                        case 0:                            log.info("cell value for case 0 {}",currentCell.getCellType().toString());//                            String value = dataFormatter.formatCellValue(currentCell);                            request.setClientId(value);                            break;                        case 1:                            log.info("cell value for case 1 {}",currentCell.getCellType().toString());                            request.setFirstName(value);                            break;                        case 2:                            log.info("cell value for case 2 {}",currentCell.getCellType().toString());                            request.setLastName(value);                            break;                        case 3:                            log.info("cell value for case 3 {}",currentCell.getCellType().toString());                            request.setPayerEmail(value);                            break;                        case 4:                            log.info("cell value for case 4 {}",currentCell.getCellType().toString());//                            String value = dataFormatter.formatCellValue(currentCell);                            request.setPayerPhone(value);                            break;                        case 5:                            log.info("cell value for case 5 {}",currentCell.getCellType().toString());                            request.setPayerAccount(value);                            break;                        case 6:                            log.info("cell value for case 6 {}",currentCell.getCellType().toString());                            request.setPayerBankCode(value);                            break;                        case 7:                            log.info("cell value for case 7 {}",currentCell.getCellType().toString());                            request.setAmount(BigDecimal.valueOf(Double.parseDouble(value)));                            break;                        case 8:                            log.info("cell value for case 8 {}",currentCell.getCellType().toString());                            request.setBvn(value);                            break;                        case 9:                            log.info("cell value for case 9 {}",currentCell.getCellType().toString());//                            request.setLoanId(value);                            request.setTransactionId(value);                            break;                        case 10:                            log.info("cell value for case 10 {}",currentCell.getCellType().toString());                            request.setDeductionDate(currentCell.getLocalDateTimeCellValue());                            break;                        default:                            break;                    }                    cellIdx++;                }                excelPayloadRequestArrayList.add(request);            }            workbook.close();            return excelPayloadRequestArrayList;        } catch (IOException e) {            e.printStackTrace();            throw new RuntimeException("fail to parse Excel file: " + e.getMessage());        }    }    private void createCell(Row row, int columnCount, Object value, CellStyle style) {        sheet.autoSizeColumn(columnCount);        Cell cell = row.createCell(columnCount);        if (value instanceof Integer) {            cell.setCellValue(String.valueOf(value));        } else if (value instanceof Double) {            cell.setCellValue(String.valueOf(value));        } else if (value instanceof Boolean) {            cell.setCellValue((Boolean) value);        } else if (value instanceof Long) {            cell.setCellValue(String.valueOf(value));        } else {            cell.setCellValue((String) value);        }        cell.setCellStyle(style);    }    private void createHeaderRow() {        LocalDateTime date = LocalDateTime.now();        String[] strDate = String.valueOf(date).split("\\.");        sheet = workbook.createSheet("loan".concat(strDate[1]));        Row row = sheet.createRow(0);        CellStyle style = workbook.createCellStyle();        XSSFFont font = workbook.createFont();        font.setBold(true);        font.setFontHeight(20);        style.setFont(font);        style.setAlignment(HorizontalAlignment.CENTER);//        createCell(row, 0, "loan_schedule", style);//        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 11));        font.setFontHeightInPoints((short) 10);        row = sheet.createRow(0);        font.setBold(true);        font.setFontHeight(16);        style.setFont(font);        createCell(row, 0, "clientId", style);        createCell(row, 1, "firstName", style);        createCell(row, 2, "LastName", style);        createCell(row, 3, "payerEmail", style);        createCell(row, 4, "payerPhone", style);        createCell(row, 5, "payerAccount", style);        createCell(row, 6, "payerBankCode", style);        createCell(row, 7, "amount", style);        createCell(row, 8, "bvn", style);        createCell(row, 9, "loanId", style);        createCell(row, 10, "deductionDate", style);    }    public void exportDataToExcel(HttpServletResponse response) throws IOException {        createHeaderRow();        ServletOutputStream outputStream = response.getOutputStream();        workbook.write(outputStream);//        workbook.close();        outputStream.close();    }}