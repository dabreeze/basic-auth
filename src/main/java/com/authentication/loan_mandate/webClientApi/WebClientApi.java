package com.authentication.loan_mandate.webClientApi;import io.netty.handler.ssl.SslContext;import io.netty.handler.ssl.SslContextBuilder;import io.netty.handler.ssl.util.InsecureTrustManagerFactory;import org.json.JSONArray;import org.json.JSONObject;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.client.reactive.ReactorClientHttpConnector;import org.springframework.stereotype.Service;import org.springframework.util.MultiValueMap;import org.springframework.web.reactive.function.client.WebClient;import reactor.core.publisher.Mono;import reactor.netty.http.client.HttpClient;import reactor.netty.tcp.TcpClient;import javax.net.ssl.SSLException;import java.util.function.Consumer;@Servicepublic class WebClientApi {    SslContext sslContext = SslContextBuilder            .forClient()            .trustManager(InsecureTrustManagerFactory.INSTANCE)            .build();    TcpClient tcpClient = TcpClient.create().secure(sslContextSpec -> sslContextSpec.sslContext(sslContext));    HttpClient httpClient = HttpClient.from(tcpClient);    WebClient webClient = WebClient.builder().codecs(configurer -> configurer            .defaultCodecs()            .maxInMemorySize(16 * 1024 * 1024)).clientConnector(new ReactorClientHttpConnector(httpClient)).build();    public WebClientApi() throws SSLException {    }    public Mono<JSONObject> getWebClient(String url, MultiValueMap<String, String> addedHeader) {        JSONObject getBack = new JSONObject();        try {            Consumer<HttpHeaders> consumer = it -> it.addAll(addedHeader);            return webClient.get()                    .uri(url)                    .headers(consumer)                    .exchangeToMono(response -> {                        System.out.println(response.rawStatusCode());                        getBack.put("status", response.rawStatusCode());                        getBack.put("header", response.headers().asHttpHeaders());                        return response.bodyToMono(String.class)                                .flatMap(                                        s -> {                                            try {                                                JSONObject data = new JSONObject(s);                                                getBack.put("data", data);                                            } catch (Exception e) {                                                getBack.put("data", s);                                            }                                            return Mono.just(getBack);                                        }                                );                    }).doOnError(throwable -> System.out.println("Failed for some reason" + throwable.getMessage()))                    .onErrorReturn(getBack);        } catch (Exception e) {            getBack.put("data", e.getMessage());            return Mono.just(getBack);        }    }    public Mono<JSONObject> postWebClient(String url, MultiValueMap<String, String> addedHeader, Object dataToResponse) {        Consumer<HttpHeaders> consumer = it -> it.addAll(addedHeader);        JSONObject postBack = new JSONObject();        try {            if (dataToResponse instanceof JSONObject) {                //you have an object                dataToResponse = ((JSONObject) dataToResponse).toMap();            } else if (dataToResponse instanceof JSONArray) {                dataToResponse = ((JSONArray) dataToResponse).toList();            }            //you have an array            return webClient                    .post()                    .uri(url)                    .contentType(MediaType.APPLICATION_JSON)                    .headers(consumer)                    .bodyValue(dataToResponse)                    .exchangeToMono(response -> {                        System.out.println(response.rawStatusCode());                        postBack.put("status", response.rawStatusCode());                        postBack.put("header", response.headers().asHttpHeaders());                        return response.bodyToMono(String.class).flatMap(                                s -> {                                    try {                                        JSONObject data = new JSONObject(s);                                        postBack.put("data", data);                                    } catch (Exception e) {                                        postBack.put("data", s);                                    }                                    return Mono.just(postBack);                                }                        );                    });        } catch (Exception e) {            postBack.put("data", e.getMessage());            return Mono.just(postBack);        }    }    public Mono<JSONObject> putWebClient(String url, MultiValueMap<String, String> addedHeader, Object dataToResponse) {        Consumer<HttpHeaders> consumer = it -> it.addAll(addedHeader);        JSONObject postBack = new JSONObject();        try {            if (dataToResponse instanceof JSONObject) {                //you have an object                dataToResponse = ((JSONObject) dataToResponse).toMap();            } else if (dataToResponse instanceof JSONArray) {                dataToResponse = ((JSONArray) dataToResponse).toList();            }            //you have an array            return webClient                    .put()                    .uri(url)                    .contentType(MediaType.APPLICATION_JSON)                    .headers(consumer)                    .bodyValue(dataToResponse)                    .exchangeToMono(response -> {                        System.out.println(response.rawStatusCode());                        postBack.put("status", response.rawStatusCode());                        postBack.put("header", response.headers().asHttpHeaders());                        return response.bodyToMono(String.class).flatMap(                                s -> {                                    try {                                        JSONObject data = new JSONObject(s);                                        postBack.put("data", data);                                    } catch (Exception e) {                                        postBack.put("data", s);                                    }                                    return Mono.just(postBack);                                }                        );                    });        } catch (Exception e) {            postBack.put("data", e.getMessage());            return Mono.just(postBack);        }    }}