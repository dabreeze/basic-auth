package com.authentication.cdlauthentication.api;import com.authentication.cdlauthentication.data.UserLoginRequestDto;import com.authentication.cdlauthentication.data.UserResponseDto;import com.authentication.cdlauthentication.domain.model.AppUser;import com.authentication.cdlauthentication.domain.repository.AppUserRepository;import com.authentication.cdlauthentication.util.security.config.JwtUtils;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.validation.Valid;import java.util.*;@Slf4j@RestController@RequestMapping("/v1")@RequiredArgsConstructorpublic class AuthController {    private static Map<String, String> error = new HashMap<>();    private final AuthenticationManager authenticationManager;    private final AppUserRepository appUserRepository;    Logger Log = LoggerFactory.getLogger(AuthController.class);    private final JwtUtils jwtUtils;    @PostMapping("/authenticate")    public ResponseEntity<?> authenticate(@RequestBody @Valid UserLoginRequestDto request) throws            NoSuchElementException, NullPointerException    {        Optional<AppUser> user;        try        {            user = appUserRepository.findUserByUsername(request.getUsername());        } catch (NoSuchElementException ex)        {            error.put("status",String.valueOf(HttpStatus.NOT_FOUND.value()));            error.put("message", ex.getMessage());            error.put("date",String.valueOf(new Date()));            error.put("response","404");            Log.error("------> Some errors has occurred {}",error);            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error);        }        try {            Log.info("------> user goes here {Username} :" + request.getUsername());            authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword())            );            Log.info("------> authenticated");            return ResponseEntity.ok(new UserResponseDto(user.get(), jwtUtils.generateToken(user.get())));        } catch (NullPointerException c) {            error.put("status",String.valueOf(HttpStatus.BAD_REQUEST.value()));            error.put("message",c.getMessage());            error.put("date",String.valueOf(new Date()));            error.put("response","400");            Log.error("------> Some errors has occurred {}", error);            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error);        }    }}