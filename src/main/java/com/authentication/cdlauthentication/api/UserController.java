package com.authentication.cdlauthentication.api;import com.authentication.cdlauthentication.data.CreateUserRequestDto;import com.authentication.cdlauthentication.data.UserLoginRequestDto;import com.authentication.cdlauthentication.data.UserResponseDto;import com.authentication.cdlauthentication.service.UserService;import com.authentication.cdlauthentication.util.security.exceptions.ResourceNotFoundException;import io.jsonwebtoken.MalformedJwtException;import io.jsonwebtoken.SignatureException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import org.springframework.web.reactive.function.client.WebClient;import javax.validation.Valid;import java.util.Date;import java.util.HashMap;import java.util.Map;@RestController@RequestMapping("/v1")final class UserController {    private final WebClient webClient= WebClient.builder().build();    private final UserService userService;    private static final Logger LOG = LoggerFactory.getLogger(UserController.class);    private static Map<String, String> error = new HashMap<>();    @Value( "${CDL_FCMB_LDAP_BASE_URL_VALUE}" )    private String uri;    public UserController(final UserService userService){        this.userService = userService;    }    @PostMapping("/login")    public ResponseEntity<?> loginRequest(@RequestBody @Valid UserLoginRequestDto userLoginRequestDto) throws ResourceNotFoundException, MalformedJwtException,            SignatureException {            String response = userService.callFCMBApi(userLoginRequestDto);        LOG.info("login payload{}---- "+userLoginRequestDto.getUsername()+ " password ****** ");        try {                response = userService.callFCMBApi(userLoginRequestDto);                if (response == null) return new ResponseEntity<>(HttpStatus.BAD_REQUEST);                LOG.info("--------> here is the response " + response);            }catch (Exception e){            error.put("status",String.valueOf(HttpStatus.OK.value()));            error.put("message", e.getMessage());            error.put("date",String.valueOf(new Date()));            error.put("response","408");            return new ResponseEntity<>(error, HttpStatus.OK);        }        return new ResponseEntity<>(response, HttpStatus.OK);    }    @PreAuthorize("hasRole('ADMIN')")    @PostMapping("/create")    public ResponseEntity<?>createUser(@RequestBody @Valid CreateUserRequestDto requestDto){        LOG.info("--------> request body: " + requestDto.getUsername());        UserResponseDto user = userService.createUser(requestDto);        LOG.info("--------> Successfully created! ");        return new ResponseEntity<>(user,HttpStatus.CREATED);    }}