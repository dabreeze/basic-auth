package com.authentication.cdlauthentication.service;import com.authentication.cdlauthentication.data.CreateUserRequestDto;import com.authentication.cdlauthentication.data.UserLoginRequestDto;import com.authentication.cdlauthentication.data.UserLoginResponseDto;import com.authentication.cdlauthentication.data.UserResponseDto;import com.authentication.cdlauthentication.domain.model.AppUser;import com.authentication.cdlauthentication.domain.model.Role;import com.authentication.cdlauthentication.domain.repository.AppUserRepository;import com.authentication.cdlauthentication.domain.repository.RoleRepository;import com.authentication.cdlauthentication.util.security.exceptions.NoAuthorizationException;import com.authentication.cdlauthentication.util.security.exceptions.ResourceNotFoundException;import com.google.gson.*;import org.apache.commons.lang3.StringUtils;import org.json.XML;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.ComponentScan;import org.springframework.http.HttpStatus;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.web.reactive.function.client.WebClient;import reactor.core.publisher.Mono;import java.util.*;@ComponentScan@Servicepublic class UserServiceImpl implements UserService {    @Autowired    private RoleRepository roleRepository;    @Autowired    private final AppUserRepository appUserRepository;    private final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();    private Gson gsonConverter;    JsonObject jsonObject = new JsonObject();    private final UserLoginResponseDto userLoginResponseDto = new UserLoginResponseDto();    private final WebClient webClient= WebClient.builder().build();    private static final Logger LOG = LoggerFactory.getLogger(UserServiceImpl.class);    public UserServiceImpl(AppUserRepository appUserRepository) {        this.appUserRepository = appUserRepository;    }    @Value( "${CDL_FCMB_LDAP_BASE_URL_VALUE}" )    private String uri;    @Value("${CDL_FCMB_LDAP_APP_ID_VALUE}")    private String appIdValue;    @Value("${CDL_FCMB_LDAP_APP_VALUE}")    private String appValue;    @Override    public String callFCMBApi(UserLoginRequestDto userLoginRequestDto) throws ResourceNotFoundException {        String resultFromFCMB =null;    try {     resultFromFCMB = webClient.post().uri(uri).header("Content-Type", "text/xml").body(Mono.just(                    "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\n"                        + "   <soapenv:Header/>\n" + "   <soapenv:Body>\n" + "      <tem:GetUserAdStaffID>\n"                            + "         <!--Optional:-->\n" + "         <tem:LoginName>" + userLoginRequestDto.getUsername() + "</tem:LoginName>\n"                            + "         <!--Optional:-->\n" + "         <tem:Password>" + userLoginRequestDto.getPassword() + "</tem:Password>\n"                            + "         <!--Optional:-->\n" + "         <tem:AppID>" + appIdValue + "</tem:AppID>\n"                            + "         <!--Optional:-->\n" + "         <tem:AppKey>" + appValue + "</tem:AppKey>\n"                            + "      </tem:GetUserAdStaffID>\n" + "   </soapenv:Body>\n" + "</soapenv:Envelope>"),            String.class).retrieve().bodyToMono(String.class).block();    }catch(IllegalArgumentException e){    LOG.info("--------> result fcmb");    userLoginResponseDto.setStatusCode(HttpStatus.BAD_GATEWAY.value());    userLoginResponseDto.setResponseMessage("6677tyf76g7878");    userLoginResponseDto.setDate(new Date());    LOG.info("--------> response "+ userLoginResponseDto.getResponseMessage());    return userLoginResponseDto.toString();    }        if (resultFromFCMB == null){            throw new IllegalArgumentException("No user found for "+ userLoginRequestDto.getUsername());        }        if (StringUtils.isBlank(resultFromFCMB) || StringUtils.isEmpty(resultFromFCMB)) {            LOG.info("--------> fcmbTemplateElementUserDetails: {}", resultFromFCMB);            LOG.info("--------> First Trial Fail");            throw new NoAuthorizationException("Network error, try again");        }        // converts XML to json        org.json.JSONObject jsonResult = XML.toJSONObject(resultFromFCMB);        final JsonElement fcmbTemplateElementResult = JsonParser.parseString(jsonResult.toString());        final JsonElement fcmbTemplateElementEnvelopeResult = extractJsonObjectNamed("soap:Envelope",                fcmbTemplateElementResult);        final JsonElement fcmbTemplateElementBodyResult = extractJsonObjectNamed("soap:Body",                fcmbTemplateElementEnvelopeResult);        final JsonElement fcmbTemplateElementUserDetailsAd = extractJsonObjectNamed("GetUserAdStaffIDResponse",                fcmbTemplateElementBodyResult);        LOG.info("--------> fcmbTemplateElementUserDetails: {}", fcmbTemplateElementUserDetailsAd.toString());        final String getResult = extractStringNamed("GetUserAdStaffIDResult", fcmbTemplateElementUserDetailsAd);        LOG.info("--------> result "+getResult);        if(getResult == null){            LOG.info("--------> Staff Id "+getResult);            throw new NoAuthorizationException("No user found for "+ userLoginRequestDto.getUsername());        }        if (!StringUtils.isNumeric(getResult)) {            final String removeLeftPaddingCharacter = getResult.substring(1);// remove first letter            LOG.info("--------> removeLeftPaddingCharacter: {}", removeLeftPaddingCharacter);            if (StringUtils.isNotBlank(removeLeftPaddingCharacter) && !StringUtils.isNumeric(removeLeftPaddingCharacter)) {                throw new ResourceNotFoundException("Incorrect username and password");            }        }        // Making a second call        resultFromFCMB = webClient.post().uri(uri).header("Content-Type", "text/xml")                .body(Mono.just("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "                        + "xmlns:tem=\"http://tempuri.org/\">\r\n   " + "<soapenv:Header/>\r\n   " + "<soapenv:Body>\r\n      "                        + "<tem:GetUserAdFullDetails>\r\n            " + "<!--Optional:-->\r\n         " + "<tem:LoginName>"                        + userLoginRequestDto.getUsername() + "</tem:LoginName>\r\n         " + "<!--Optional:-->\r\n         " + "<tem:Password>"                        + userLoginRequestDto.getPassword() + "</tem:Password>\r\n         " + "<!--Optional:-->\r\n       " + "  <tem:AppID>"                        + appIdValue + "</tem:AppID>\r\n       " + "  <!--Optional:-->\r\n   " + "      <tem:AppKey>"                        + appValue + "</tem:AppKey>\r\n     " + " </tem:GetUserAdFullDetails>\r\n "                        + "  </soapenv:Body>\r\n" + "</soapenv:Envelope>"), String.class)                .retrieve().bodyToMono(String.class).block();        LOG.info("--------> Second resultFromFCMB: {}", resultFromFCMB);        if (StringUtils.isBlank(resultFromFCMB) || StringUtils.isEmpty(resultFromFCMB)) {            LOG.info("--------> Second Trial Fail");            throw new NoAuthorizationException("Network error, try again");        }        org.json.JSONObject json = XML.toJSONObject(resultFromFCMB);        final JsonElement fcmbTemplateElement = JsonParser.parseString(json.toString());        final JsonElement fcmbTemplateElementEnvelope = extractJsonObjectNamed("soap:Envelope",                fcmbTemplateElement);        final JsonElement fcmbTemplateElementBody = extractJsonObjectNamed("soap:Body",                fcmbTemplateElementEnvelope);        final JsonElement fcmbTemplateElementUserDetails = extractJsonObjectNamed("GetUserAdFullDetailsResponse",                fcmbTemplateElementBody);        final JsonElement fcmbTemplateElementUserDetailsResult = extractJsonObjectNamed("GetUserAdFullDetailsResult", fcmbTemplateElementUserDetails);        final String email = extractStringNamed("Email", fcmbTemplateElementUserDetailsResult);        final String staffId = extractStringNamed("StaffID", fcmbTemplateElementUserDetailsResult);        final String department = extractStringNamed("Department", fcmbTemplateElementUserDetailsResult);        final String mobileNo = extractStringNamed("MobileNo", fcmbTemplateElementUserDetailsResult);        final String displayName = extractStringNamed("DisplayName", fcmbTemplateElementUserDetailsResult);        final String staffName = extractStringNamed("StaffName", fcmbTemplateElementUserDetailsResult);        final String response = extractStringNamed("Response", fcmbTemplateElementUserDetailsResult);        final String responseMessage = extractStringNamed("ResponseMessage",                fcmbTemplateElementUserDetailsResult);        if (response.equals("00")) {            final String Department = extractStringNamed("Department", fcmbTemplateElementUserDetailsResult);            if (StringUtils.isBlank(Department)) {                throw new RuntimeException("No Department exists for this user");            }        }        jsonObject.addProperty("staffId", staffId);        jsonObject.addProperty("displayName", displayName);        jsonObject.addProperty("department", department);        jsonObject.addProperty("email", email);        jsonObject.addProperty("mobileNo", mobileNo);        jsonObject.addProperty("staffName", staffName);        jsonObject.addProperty("response", response);        jsonObject.addProperty("responseMessage", responseMessage);        LOG.info("--------> json result: {}", jsonObject);        return jsonObject.toString();    }    private JsonObject extractJsonObjectNamed(final String parameterName, final JsonElement element) {        JsonObject jsonObject = null;        if (element.isJsonObject()) {            final JsonObject object = element.getAsJsonObject();            if (object.has(parameterName)) {                jsonObject = object.get(parameterName).getAsJsonObject();            }        }        return jsonObject;    }    private String extractStringNamed(final String parameterName, final JsonElement element) {        String stringValue = null;        if (element.isJsonObject()) {            final JsonObject object = element.getAsJsonObject();            if (object.has(parameterName) && object.get(parameterName).isJsonPrimitive()) {                final JsonPrimitive primitive = object.get(parameterName).getAsJsonPrimitive();                final String valueAsString = primitive.getAsString();                if (StringUtils.isNotBlank(valueAsString)) {                    stringValue = valueAsString;                }            }        }        return stringValue;    }    private static boolean isPayloadValidated(String request){        return StringUtils.isNotBlank(request) && StringUtils.isNotEmpty(request);    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        return appUserRepository.findUserByUsername(username).orElseThrow(()->new NullPointerException("Not user found"));    }    @Override    public UserResponseDto createUser(CreateUserRequestDto requestDto)throws UsernameNotFoundException {        LOG.info("--------> create user request goes here username: "+requestDto.getUsername());        Optional<AppUser> user = appUserRepository.findUserByUsername(requestDto.getUsername());        if(user.isPresent()){            LOG.info("--------> User already exist with username: "+requestDto.getUsername());            throw new IllegalArgumentException("User already exists");        }        AppUser aUser = new AppUser();        Set<Role> roleList = new HashSet<>();        for (Long role:requestDto.getRole()) {                Role newRole = roleRepository.findById(role).orElseThrow(                        ()->new IllegalArgumentException("No role found")                );                roleList.add(newRole);        }        aUser.setUsername(requestDto.getUsername());        aUser.setPassword(passwordEncoder.encode(requestDto.getPassword()));        aUser.setRole(roleList);        AppUser savedUser = appUserRepository.save(aUser);        LOG.info("--------> found user: "+aUser.getUsername());        UserResponseDto response = new UserResponseDto();        response.setUser(savedUser);        return response;    }}