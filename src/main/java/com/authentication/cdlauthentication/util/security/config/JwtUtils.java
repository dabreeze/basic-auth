package com.authentication.cdlauthentication.util.security.config;import com.authentication.cdlauthentication.domain.model.CustomAppUser;import io.jsonwebtoken.*;import lombok.RequiredArgsConstructor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerExceptionResolver;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;import java.util.function.Function;@Component@RequiredArgsConstructorpublic class JwtUtils {    private static final Logger LOG = LoggerFactory.getLogger(JwtUtils.class);    private String jwtSigninKey ="secret";    @Autowired    private final HandlerExceptionResolver handlerExceptionResolver;    public String extractUsername(String token){        return extractClaim(token, Claims::getSubject);    }    public Date extractExpiration(String token){ return extractClaim(token, Claims::getExpiration);}    public boolean hasClaim(String token, String claimName){        final Claims claims = extractAllClaims(token);        return claims.get(claimName) != null;    }    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver){        final Claims claims = extractAllClaims(token);        return claimsResolver.apply(claims);    }    private Claims extractAllClaims(String token ) throws MalformedJwtException, SignatureException{        return Jwts.parser().setSigningKey(jwtSigninKey).parseClaimsJws(token).getBody();    }    private Boolean isTokenExpired(String token){        return extractExpiration(token).before(new Date());    }    public String generateToken(UserDetails customAppUser){        Map<String, Object>claims= new HashMap<>();        return createToken(claims,customAppUser);    }    public String generateToken(CustomAppUser customAppUser, Map<String, Object>claims){return createToken(claims, customAppUser);}    public String createToken(Map<String, Object> claims, UserDetails customAppUser){        return Jwts.builder().setClaims(claims)                .setSubject(customAppUser.getUsername())                .claim("authorities", customAppUser.getAuthorities())                .setIssuedAt(new Date(System.currentTimeMillis()))                .setExpiration(new Date(System.currentTimeMillis()+ TimeUnit.HOURS.toMillis(24*365*365)))                .signWith(SignatureAlgorithm.HS256, jwtSigninKey).compact();    }    public boolean isTokenValid(String token, UserDetails userDetails){        final String username = extractUsername(token);        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));    }}