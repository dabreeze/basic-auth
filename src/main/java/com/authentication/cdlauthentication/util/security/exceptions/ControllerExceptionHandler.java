package com.authentication.cdlauthentication.util.security.exceptions;import com.fasterxml.jackson.core.JsonProcessingException;import io.jsonwebtoken.MalformedJwtException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.configurationprocessor.json.JSONException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.AccessDeniedException;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestControllerAdvice;import org.springframework.web.client.HttpServerErrorException;import org.springframework.web.context.request.WebRequest;import org.springframework.web.reactive.function.client.WebClientRequestException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.ConnectException;import java.net.UnknownHostException;import java.security.GeneralSecurityException;import java.util.*;import java.util.stream.Collectors;@RestControllerAdvicepublic class ControllerExceptionHandler {    public Map<String, String> error = new HashMap<>();    private static final Logger LOG = LoggerFactory.getLogger(ControllerExceptionHandler.class);    @ResponseStatus(HttpStatus.NOT_FOUND)    @ExceptionHandler(ResourceNotFoundException.class)    public Map<String,String> resourceNotFoundException(ResourceNotFoundException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_NOT_FOUND));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(404));        LOG.error("--------> Not found argument  comes here {}", error);        return error;    }    @ResponseStatus(HttpStatus.NOT_FOUND)    @ExceptionHandler(NullPointerException.class)    public Map<String, String> nullPointerException(NullPointerException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_NOT_FOUND));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(404));        LOG.error("--------> No user found comes here {}", error);        return error;    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(AccessDeniedException.class)    public ResponseEntity<?> accessDenied(ResourceNotFoundException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> Access denied argument comes here {}", error);        return new ResponseEntity<>(error,HttpStatus.UNAUTHORIZED);    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(IOException.class)    public Map<String,String> IOException(IOException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(404));        LOG.error("--------> Not found argument comes here {}", error);        return error;    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(ServletException.class)    public Map<String,String> servletException(ServletException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> Unauthorized request due to bad token or wrong username and password {}",error);        return error;    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(JsonProcessingException.class)    public Map<String,String> jsonParseException(JsonProcessingException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> Unauthorized request due to bad token or wrong username and password {}",error);        return error;    }    @ResponseStatus(HttpStatus.BAD_REQUEST)    @ExceptionHandler(MethodArgumentNotValidException.class)    public Map<String,String> methodArgumentNotValidException(MethodArgumentNotValidException exception,                                                             WebRequest request){        exception.getBindingResult().getFieldErrors()                        .forEach(fieldError -> {                            error.put(fieldError.getField(),fieldError.getDefaultMessage());                });        error.put("responseCode", String.valueOf(HttpServletResponse.SC_BAD_REQUEST));        error.put("message", exception.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(404));        LOG.error("--------> Not found argument comes here {}", error);        return error;    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(MalformedJwtException.class)    public Map<String,String> malformedJwtException(MalformedJwtException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> Unauthorized request due to bad token or wrong username and password {} ", error);        return error;    }    @ResponseStatus(HttpStatus.UNAUTHORIZED)    @ExceptionHandler(GeneralSecurityException.class)    public Map<String,String> signatureException(GeneralSecurityException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_UNAUTHORIZED));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> Unauthorized request due to bad token or wrong username and password {}",error);        return error;    }    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)    @ExceptionHandler(HttpServerErrorException.class)    public Map<String,String> globalExceptionHandler(Exception ex, WebRequest request) {        error.put("responseCode", String.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(500));        LOG.error("--------> global exception servlet {}",error);        return error;    }    @ResponseStatus(HttpStatus.BAD_REQUEST)    @ExceptionHandler(IllegalArgumentException.class)    public Map<String,String> illegalArguementException(IllegalArgumentException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_BAD_REQUEST));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(404));        LOG.error("--------> illegal argument here {}", error);        return error;    }    @ResponseStatus(HttpStatus.REQUEST_TIMEOUT)    @ExceptionHandler(ConnectException.class)    public Map<String,String>connectException(ConnectException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_REQUEST_TIMEOUT));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(408));        LOG.error("--------> connection timeout exception here {}",error);        return error;    }    @ResponseStatus(HttpStatus.REQUEST_TIMEOUT)    @ExceptionHandler(WebClientRequestException.class)    public Map<String,String> webClientRequestException(WebClientRequestException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_REQUEST_TIMEOUT));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> connection timeout exception here {}",error);        return error;    }    @ResponseStatus(HttpStatus.REQUEST_TIMEOUT)    @ExceptionHandler(UnknownHostException.class)    public Map<String,String> unknownHostException(UnknownHostException ex, WebRequest request){        error.put("responseCode", String.valueOf(HttpServletResponse.SC_REQUEST_TIMEOUT));        error.put("message", ex.getMessage());        error.put("date", String.valueOf(new Date()));        error.put("response", String.valueOf(403));        LOG.error("--------> connection timeout exception here {}",error);        return error;    }}