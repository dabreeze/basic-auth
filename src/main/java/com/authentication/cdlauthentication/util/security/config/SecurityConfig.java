package com.authentication.cdlauthentication.util.security.config;import com.authentication.cdlauthentication.domain.repository.AppUserRepository;import com.authentication.cdlauthentication.service.userDetailsService.CustomUserDetailsService;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.AuthenticationEntryPoint;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import java.util.Arrays;import java.util.List;@Configuration@EnableWebSecurity@RequiredArgsConstructorpublic class SecurityConfig{    @Autowired    private CustomUserDetailsService customUserDetailsService;    private final JwtAuthFilter filter;    private final AppUserRepository repository;    @Autowired    @Qualifier("customEntryPoint")    private final AuthenticationEntryPoint authenticationEntryPoint;    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {        http                .cors(Customizer.withDefaults())                .csrf().disable()                .exceptionHandling()                .authenticationEntryPoint(authenticationEntryPoint)                .and()                .authorizeRequests()                .antMatchers("/api/v1/authenticate")                .permitAll()                .anyRequest()                .authenticated()                .and()                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)                .and()                .authenticationProvider(authenticationProvider())                .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class)                .httpBasic(Customizer.withDefaults());        return http.build();    }    @Bean    CorsConfigurationSource corsConfigurationSource(){        CorsConfiguration corsConfiguration = new CorsConfiguration();        corsConfiguration.setAllowedOrigins(List.of("*"));        corsConfiguration.setAllowedMethods(List.of("*"));        corsConfiguration.setAllowedHeaders(List.of("*"));        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**",corsConfiguration);        return source;    }    @Bean    public AuthenticationProvider authenticationProvider() {        final DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setUserDetailsService(userDetailsService());        authenticationProvider.setPasswordEncoder(passwordEncoder());        return authenticationProvider;    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {        return config.getAuthenticationManager();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public UserDetailsService userDetailsService() {        return new UserDetailsService() {            @Override            public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {                return repository.findUserByUsername(username).orElseThrow(() -> new NullPointerException("Not user found"));            }        };    }}