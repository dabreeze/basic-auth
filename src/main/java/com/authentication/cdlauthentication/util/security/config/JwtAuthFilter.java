package com.authentication.cdlauthentication.util.security.config;import com.authentication.cdlauthentication.service.userDetailsService.CustomUserDetailsService;import com.authentication.cdlauthentication.util.security.exceptions.ControllerExceptionHandler;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import io.jsonwebtoken.MalformedJwtException;import io.jsonwebtoken.SignatureException;import lombok.RequiredArgsConstructor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import org.springframework.web.servlet.HandlerExceptionResolver;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.OutputStream;import java.util.Date;import java.util.HashMap;import java.util.Map;import static org.springframework.http.HttpHeaders.AUTHORIZATION;@Component@RequiredArgsConstructorpublic class JwtAuthFilter extends OncePerRequestFilter {    private static final Logger LOG = LoggerFactory.getLogger(ControllerExceptionHandler.class);    @Autowired    private final JwtUtils jwtUtils;    @Autowired    private final HandlerExceptionResolver handlerExceptionResolver;    private static Map<String,String> error = new HashMap<>();    @Autowired    private CustomUserDetailsService customeUserDetailsService;    @Override    protected void doFilterInternal(HttpServletRequest request,                                    HttpServletResponse response,                                    FilterChain filterChain) throws ServletException, IOException, JsonProcessingException ,            SignatureException, MalformedJwtException{        final String authHeader = request.getHeader(AUTHORIZATION);        final String userEmail;        final String jwtToken;        if (authHeader == null || !authHeader.startsWith("Bearer")) {            filterChain.doFilter(request, response);            return;        }        jwtToken = authHeader.substring(7);        try {            userEmail = jwtUtils.extractUsername(jwtToken);            if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {                UserDetails userDetails = customeUserDetailsService.loadUserByUsername(userEmail);                if (jwtUtils.isTokenValid(jwtToken, userDetails)) {                    UsernamePasswordAuthenticationToken authToken =                            new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                    SecurityContextHolder.getContext().setAuthentication(authToken);                }            }            filterChain.doFilter(request, response);        }catch (Exception e){            LOG.info("--------> error message goes here : "+e.getMessage());            error.put("status", HttpStatus.UNAUTHORIZED.toString());            error.put("message", e.getMessage());            error.put("date", String.valueOf(new Date()));            error.put("response","403");            response.setContentType(MediaType.APPLICATION_JSON_VALUE);            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);            OutputStream responseStream = response.getOutputStream();            ObjectMapper mapper = new ObjectMapper();            mapper.writeValue(responseStream, error);            responseStream.flush();        }    }}