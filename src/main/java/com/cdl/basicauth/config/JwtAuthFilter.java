package com.cdl.basicauth.config;import com.cdl.basicauth.service.CustomeUserDetailsService;import io.jsonwebtoken.MalformedJwtException;import io.jsonwebtoken.SignatureException;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import org.springframework.web.servlet.HandlerExceptionResolver;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import static org.springframework.http.HttpHeaders.AUTHORIZATION;@Component@RequiredArgsConstructorpublic class JwtAuthFilter extends OncePerRequestFilter {    private final JwtUtils jwtUtils;    @Autowired    private final HandlerExceptionResolver handlerExceptionResolver;    @Autowired    private final CustomeUserDetailsService customeUserDetailsService;//    private final HandlerExceptionResolver handlerExceptionResolver;    @Override    protected void doFilterInternal(HttpServletRequest request,                                    HttpServletResponse response,                                    FilterChain filterChain) throws ServletException, IOException {        final String authHeader = request.getHeader(AUTHORIZATION);        final String userEmail;        final String jwtToken;        if(authHeader == null || !authHeader.startsWith("Bearer")){            filterChain.doFilter(request,response);            return;        }        jwtToken = authHeader.substring(7);        try {            userEmail = jwtUtils.extractUsername(jwtToken);        if(userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {            UserDetails userDetails = customeUserDetailsService.loadUserByUsername(userEmail);            if (jwtUtils.isTokenValid(jwtToken, userDetails)) {                UsernamePasswordAuthenticationToken authToken =                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authToken);            }        }            }catch (MalformedJwtException ade){                handlerExceptionResolver.resolveException(request,response,null,ade);        }catch (SignatureException ex){            handlerExceptionResolver.resolveException(request,response,null,ex);        }        filterChain.doFilter(request,response);    }}