package com.cdl.basicauth.controller;import com.cdl.basicauth.config.JwtUtils;import com.cdl.basicauth.data.dto.AppUserRequestDto;import com.cdl.basicauth.data.dto.UserResponseDto;import com.cdl.basicauth.data.model.AppUser;import com.cdl.basicauth.data.repo.AppUserRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@Slf4j@RestController@RequestMapping("/api/v1/auth")@RequiredArgsConstructorpublic class AuthenticationController {//    private final UserDetailsService userDetailsService;    private final AuthenticationManager authenticationManager;    private final AppUserRepository appUserRepository;    Logger Log = LoggerFactory.getLogger(AuthenticationController.class);    private final JwtUtils jwtUtils;    @PostMapping("/authenticate")    public ResponseEntity<?> authenticate(@RequestBody AppUserRequestDto request){        Log.info("------> goes here {}"+"Username: "+request.getUserName());        authenticationManager.authenticate(                new UsernamePasswordAuthenticationToken(request.getUserName(), request.getPassword())        );        Log.info("------> authenticated");        final AppUser user = appUserRepository.findUserByUsername(request.getUserName());        if(user != null){            return ResponseEntity.ok(new UserResponseDto(user,jwtUtils.generateToken(user) ));        }        Log.info("------> Some errors has occurred");        return ResponseEntity.status(400).body("Some errors has occurred");    }}